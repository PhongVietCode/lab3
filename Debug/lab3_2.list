
lab3_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000254c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002658  08002658  00012658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800267c  0800267c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000000  0800267c  0800267c  0002014c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800267c  0800267c  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800267c  0800267c  0001267c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002680  08002680  00012680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  08002684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000014c  080027d0  0002014c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080027d0  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020175  2**0
                  CONTENTS, READONLY
 13 .debug_info   000085fc  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b2a  00000000  00000000  000287b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  0002a2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e3  00000000  00000000  0002ad30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016a51  00000000  00000000  0002b513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b92a  00000000  00000000  00041f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082478  00000000  00000000  0004d88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002938  00000000  00000000  000cfd08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d2640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000014c 	.word	0x2000014c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002640 	.word	0x08002640

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000150 	.word	0x20000150
 8000148:	08002640 	.word	0x08002640

0800014c <displayNumber>:
int num6[7] = {0, 1, 0, 0, 0, 0, 0};
int num7[7] = {0, 0, 0, 1, 1, 1, 1};
int num8[7] = {0, 0, 0, 0, 0, 0, 0};
int num9[7] = {0, 0, 0, 0, 1, 0, 0};
void displayNumber(int numberArr[])
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, numberArr[0]);
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	b2db      	uxtb	r3, r3
 800015a:	461a      	mov	r2, r3
 800015c:	2108      	movs	r1, #8
 800015e:	481f      	ldr	r0, [pc, #124]	; (80001dc <displayNumber+0x90>)
 8000160:	f001 fa4b 	bl	80015fa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, numberArr[1]);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	3304      	adds	r3, #4
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	b2db      	uxtb	r3, r3
 800016c:	461a      	mov	r2, r3
 800016e:	2110      	movs	r1, #16
 8000170:	481a      	ldr	r0, [pc, #104]	; (80001dc <displayNumber+0x90>)
 8000172:	f001 fa42 	bl	80015fa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, numberArr[2]);
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	3308      	adds	r3, #8
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	b2db      	uxtb	r3, r3
 800017e:	461a      	mov	r2, r3
 8000180:	2120      	movs	r1, #32
 8000182:	4816      	ldr	r0, [pc, #88]	; (80001dc <displayNumber+0x90>)
 8000184:	f001 fa39 	bl	80015fa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, numberArr[3]);
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	330c      	adds	r3, #12
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	b2db      	uxtb	r3, r3
 8000190:	461a      	mov	r2, r3
 8000192:	2140      	movs	r1, #64	; 0x40
 8000194:	4811      	ldr	r0, [pc, #68]	; (80001dc <displayNumber+0x90>)
 8000196:	f001 fa30 	bl	80015fa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, numberArr[4]);
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	3310      	adds	r3, #16
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	b2db      	uxtb	r3, r3
 80001a2:	461a      	mov	r2, r3
 80001a4:	2180      	movs	r1, #128	; 0x80
 80001a6:	480d      	ldr	r0, [pc, #52]	; (80001dc <displayNumber+0x90>)
 80001a8:	f001 fa27 	bl	80015fa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, numberArr[5]);
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3314      	adds	r3, #20
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	461a      	mov	r2, r3
 80001b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <displayNumber+0x90>)
 80001bc:	f001 fa1d 	bl	80015fa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, numberArr[6]);
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	3318      	adds	r3, #24
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	461a      	mov	r2, r3
 80001ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001ce:	4803      	ldr	r0, [pc, #12]	; (80001dc <displayNumber+0x90>)
 80001d0:	f001 fa13 	bl	80015fa <HAL_GPIO_WritePin>
}
 80001d4:	bf00      	nop
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	40010c00 	.word	0x40010c00

080001e0 <display7Seg>:
    HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
    HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
    HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
}
void display7Seg(int num)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
    switch (num)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b09      	cmp	r3, #9
 80001ec:	d83e      	bhi.n	800026c <display7Seg+0x8c>
 80001ee:	a201      	add	r2, pc, #4	; (adr r2, 80001f4 <display7Seg+0x14>)
 80001f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f4:	0800021d 	.word	0x0800021d
 80001f8:	08000225 	.word	0x08000225
 80001fc:	0800022d 	.word	0x0800022d
 8000200:	08000235 	.word	0x08000235
 8000204:	0800023d 	.word	0x0800023d
 8000208:	08000245 	.word	0x08000245
 800020c:	0800024d 	.word	0x0800024d
 8000210:	08000255 	.word	0x08000255
 8000214:	0800025d 	.word	0x0800025d
 8000218:	08000265 	.word	0x08000265
    {
    case 0:
        displayNumber(num0);
 800021c:	4815      	ldr	r0, [pc, #84]	; (8000274 <display7Seg+0x94>)
 800021e:	f7ff ff95 	bl	800014c <displayNumber>
        break;
 8000222:	e023      	b.n	800026c <display7Seg+0x8c>
    case 1:
        displayNumber(num1);
 8000224:	4814      	ldr	r0, [pc, #80]	; (8000278 <display7Seg+0x98>)
 8000226:	f7ff ff91 	bl	800014c <displayNumber>
        break;
 800022a:	e01f      	b.n	800026c <display7Seg+0x8c>
    case 2:
        displayNumber(num2);
 800022c:	4813      	ldr	r0, [pc, #76]	; (800027c <display7Seg+0x9c>)
 800022e:	f7ff ff8d 	bl	800014c <displayNumber>
        break;
 8000232:	e01b      	b.n	800026c <display7Seg+0x8c>
    case 3:
        displayNumber(num3);
 8000234:	4812      	ldr	r0, [pc, #72]	; (8000280 <display7Seg+0xa0>)
 8000236:	f7ff ff89 	bl	800014c <displayNumber>
        break;
 800023a:	e017      	b.n	800026c <display7Seg+0x8c>
    case 4:
        displayNumber(num4);
 800023c:	4811      	ldr	r0, [pc, #68]	; (8000284 <display7Seg+0xa4>)
 800023e:	f7ff ff85 	bl	800014c <displayNumber>
        break;
 8000242:	e013      	b.n	800026c <display7Seg+0x8c>
    case 5:
        displayNumber(num5);
 8000244:	4810      	ldr	r0, [pc, #64]	; (8000288 <display7Seg+0xa8>)
 8000246:	f7ff ff81 	bl	800014c <displayNumber>
        break;
 800024a:	e00f      	b.n	800026c <display7Seg+0x8c>
    case 6:
        displayNumber(num6);
 800024c:	480f      	ldr	r0, [pc, #60]	; (800028c <display7Seg+0xac>)
 800024e:	f7ff ff7d 	bl	800014c <displayNumber>
        break;
 8000252:	e00b      	b.n	800026c <display7Seg+0x8c>
    case 7:
        displayNumber(num7);
 8000254:	480e      	ldr	r0, [pc, #56]	; (8000290 <display7Seg+0xb0>)
 8000256:	f7ff ff79 	bl	800014c <displayNumber>
        break;
 800025a:	e007      	b.n	800026c <display7Seg+0x8c>
    case 8:
        displayNumber(num8);
 800025c:	480d      	ldr	r0, [pc, #52]	; (8000294 <display7Seg+0xb4>)
 800025e:	f7ff ff75 	bl	800014c <displayNumber>
        break;
 8000262:	e003      	b.n	800026c <display7Seg+0x8c>
    case 9:
        displayNumber(num9);
 8000264:	480c      	ldr	r0, [pc, #48]	; (8000298 <display7Seg+0xb8>)
 8000266:	f7ff ff71 	bl	800014c <displayNumber>
        break;
 800026a:	bf00      	nop
    }
}
 800026c:	bf00      	nop
 800026e:	3708      	adds	r7, #8
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	20000000 	.word	0x20000000
 8000278:	2000001c 	.word	0x2000001c
 800027c:	20000038 	.word	0x20000038
 8000280:	20000054 	.word	0x20000054
 8000284:	20000070 	.word	0x20000070
 8000288:	2000008c 	.word	0x2000008c
 800028c:	200000a8 	.word	0x200000a8
 8000290:	200000c4 	.word	0x200000c4
 8000294:	20000168 	.word	0x20000168
 8000298:	200000e0 	.word	0x200000e0

0800029c <isButtonPress>:

// flag for buttons
static int button_flag[NO_OF_BUTTONS];
static int button_flag_long[NO_OF_BUTTONS];
int isButtonPress(int index)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
    // if press, turn off the flag and return 1
    if (button_flag[index] == 1)
 80002a4:	4a09      	ldr	r2, [pc, #36]	; (80002cc <isButtonPress+0x30>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d106      	bne.n	80002be <isButtonPress+0x22>
    {
        button_flag[index] = 0;
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <isButtonPress+0x30>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2100      	movs	r1, #0
 80002b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 80002ba:	2301      	movs	r3, #1
 80002bc:	e000      	b.n	80002c0 <isButtonPress+0x24>
    }

    // if not just return 0
    return 0;
 80002be:	2300      	movs	r3, #0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	200001c0 	.word	0x200001c0

080002d0 <button_reading>:
    {
        button_flag[index] = 1;
    }
}
void button_reading()
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
    for (int i = 0; i < NO_OF_BUTTONS; i++)
 80002d6:	2300      	movs	r3, #0
 80002d8:	607b      	str	r3, [r7, #4]
 80002da:	e0d8      	b.n	800048e <button_reading+0x1be>
    {
        // debounce button
        debounce_3[i] = debounce_2[i];
 80002dc:	4a6f      	ldr	r2, [pc, #444]	; (800049c <button_reading+0x1cc>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002e4:	496e      	ldr	r1, [pc, #440]	; (80004a0 <button_reading+0x1d0>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        debounce_2[i] = debounce_1[i];
 80002ec:	4a6d      	ldr	r2, [pc, #436]	; (80004a4 <button_reading+0x1d4>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f4:	4969      	ldr	r1, [pc, #420]	; (800049c <button_reading+0x1cc>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        // read pin button state
        switch (i)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2b02      	cmp	r3, #2
 8000300:	d01f      	beq.n	8000342 <button_reading+0x72>
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2b02      	cmp	r3, #2
 8000306:	dc27      	bgt.n	8000358 <button_reading+0x88>
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d003      	beq.n	8000316 <button_reading+0x46>
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2b01      	cmp	r3, #1
 8000312:	d00b      	beq.n	800032c <button_reading+0x5c>
            break;
        case 2:
            debounce_1[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
            break;
        default:
            break;
 8000314:	e020      	b.n	8000358 <button_reading+0x88>
            debounce_1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000316:	2101      	movs	r1, #1
 8000318:	4863      	ldr	r0, [pc, #396]	; (80004a8 <button_reading+0x1d8>)
 800031a:	f001 f957 	bl	80015cc <HAL_GPIO_ReadPin>
 800031e:	4603      	mov	r3, r0
 8000320:	4619      	mov	r1, r3
 8000322:	4a60      	ldr	r2, [pc, #384]	; (80004a4 <button_reading+0x1d4>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 800032a:	e016      	b.n	800035a <button_reading+0x8a>
            debounce_1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 800032c:	2102      	movs	r1, #2
 800032e:	485e      	ldr	r0, [pc, #376]	; (80004a8 <button_reading+0x1d8>)
 8000330:	f001 f94c 	bl	80015cc <HAL_GPIO_ReadPin>
 8000334:	4603      	mov	r3, r0
 8000336:	4619      	mov	r1, r3
 8000338:	4a5a      	ldr	r2, [pc, #360]	; (80004a4 <button_reading+0x1d4>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 8000340:	e00b      	b.n	800035a <button_reading+0x8a>
            debounce_1[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000342:	2104      	movs	r1, #4
 8000344:	4858      	ldr	r0, [pc, #352]	; (80004a8 <button_reading+0x1d8>)
 8000346:	f001 f941 	bl	80015cc <HAL_GPIO_ReadPin>
 800034a:	4603      	mov	r3, r0
 800034c:	4619      	mov	r1, r3
 800034e:	4a55      	ldr	r2, [pc, #340]	; (80004a4 <button_reading+0x1d4>)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 8000356:	e000      	b.n	800035a <button_reading+0x8a>
            break;
 8000358:	bf00      	nop
        }

        // pass debouncing
        if ((debounce_3[i] == debounce_2[i]) && (debounce_2[i] == debounce_1[i]))
 800035a:	4a51      	ldr	r2, [pc, #324]	; (80004a0 <button_reading+0x1d0>)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000362:	494e      	ldr	r1, [pc, #312]	; (800049c <button_reading+0x1cc>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800036a:	429a      	cmp	r2, r3
 800036c:	f040 808c 	bne.w	8000488 <button_reading+0x1b8>
 8000370:	4a4a      	ldr	r2, [pc, #296]	; (800049c <button_reading+0x1cc>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000378:	494a      	ldr	r1, [pc, #296]	; (80004a4 <button_reading+0x1d4>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000380:	429a      	cmp	r2, r3
 8000382:	f040 8081 	bne.w	8000488 <button_reading+0x1b8>
        {
            current_button_state[i] = debounce_1[i];
 8000386:	4a47      	ldr	r2, [pc, #284]	; (80004a4 <button_reading+0x1d4>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800038e:	4947      	ldr	r1, [pc, #284]	; (80004ac <button_reading+0x1dc>)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            // fsm
            switch (button_state_save[i])
 8000396:	4a46      	ldr	r2, [pc, #280]	; (80004b0 <button_reading+0x1e0>)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800039e:	2b0d      	cmp	r3, #13
 80003a0:	d046      	beq.n	8000430 <button_reading+0x160>
 80003a2:	2b0d      	cmp	r3, #13
 80003a4:	dc69      	bgt.n	800047a <button_reading+0x1aa>
 80003a6:	2b0b      	cmp	r3, #11
 80003a8:	d00d      	beq.n	80003c6 <button_reading+0xf6>
 80003aa:	2b0c      	cmp	r3, #12
 80003ac:	d165      	bne.n	800047a <button_reading+0x1aa>
            {
            case BUTTON_IS_RELEASED:
                /* code */
                if (current_button_state[i] == PRESS_STATE)
 80003ae:	4a3f      	ldr	r2, [pc, #252]	; (80004ac <button_reading+0x1dc>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d161      	bne.n	800047e <button_reading+0x1ae>
                {
                    button_state_save[i] = BUTTON_IS_PRESSED;
 80003ba:	4a3d      	ldr	r2, [pc, #244]	; (80004b0 <button_reading+0x1e0>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	210b      	movs	r1, #11
 80003c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                }
                break;
 80003c4:	e05b      	b.n	800047e <button_reading+0x1ae>

            case BUTTON_IS_PRESSED:
                /* code */
            	if (current_button_state[i] == RELEASED_STATE)
 80003c6:	4a39      	ldr	r2, [pc, #228]	; (80004ac <button_reading+0x1dc>)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d10f      	bne.n	80003f2 <button_reading+0x122>
			   {
            		button_flag[i] = 1;
 80003d2:	4a38      	ldr	r2, [pc, #224]	; (80004b4 <button_reading+0x1e4>)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2101      	movs	r1, #1
 80003d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				   button_state_save[i] = BUTTON_IS_RELEASED;
 80003dc:	4a34      	ldr	r2, [pc, #208]	; (80004b0 <button_reading+0x1e0>)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	210c      	movs	r1, #12
 80003e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				   counter_for_button_pressed[i] = 0;
 80003e6:	4a34      	ldr	r2, [pc, #208]	; (80004b8 <button_reading+0x1e8>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2100      	movs	r1, #0
 80003ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				   return;
 80003f0:	e051      	b.n	8000496 <button_reading+0x1c6>
			   }
                counter_for_button_pressed[i]++;
 80003f2:	4a31      	ldr	r2, [pc, #196]	; (80004b8 <button_reading+0x1e8>)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003fa:	1c5a      	adds	r2, r3, #1
 80003fc:	492e      	ldr	r1, [pc, #184]	; (80004b8 <button_reading+0x1e8>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (counter_for_button_pressed[i] >= WAITING_TIME / TIME_CYCLE)
 8000404:	4a2c      	ldr	r2, [pc, #176]	; (80004b8 <button_reading+0x1e8>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800040c:	2b63      	cmp	r3, #99	; 0x63
 800040e:	dd38      	ble.n	8000482 <button_reading+0x1b2>
                {
                    button_state_save[i] = BUTTON_IS_LONG_PRESSED;
 8000410:	4a27      	ldr	r2, [pc, #156]	; (80004b0 <button_reading+0x1e0>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	210d      	movs	r1, #13
 8000416:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    counter_for_button_pressed[i] = 0;
 800041a:	4a27      	ldr	r2, [pc, #156]	; (80004b8 <button_reading+0x1e8>)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2100      	movs	r1, #0
 8000420:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    button_flag_long[i] = 1;
 8000424:	4a25      	ldr	r2, [pc, #148]	; (80004bc <button_reading+0x1ec>)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2101      	movs	r1, #1
 800042a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                }

                break;
 800042e:	e028      	b.n	8000482 <button_reading+0x1b2>

            case BUTTON_IS_LONG_PRESSED:
                /* code */
                if (current_button_state[i] == RELEASED_STATE)
 8000430:	4a1e      	ldr	r2, [pc, #120]	; (80004ac <button_reading+0x1dc>)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d109      	bne.n	8000450 <button_reading+0x180>
                {
                    button_state_save[i] = BUTTON_IS_RELEASED;
 800043c:	4a1c      	ldr	r2, [pc, #112]	; (80004b0 <button_reading+0x1e0>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	210c      	movs	r1, #12
 8000442:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    counter_for_button_pressed[i] = 0;
 8000446:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <button_reading+0x1e8>)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2100      	movs	r1, #0
 800044c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                }
                counter_for_button_pressed[i]++;
 8000450:	4a19      	ldr	r2, [pc, #100]	; (80004b8 <button_reading+0x1e8>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000458:	1c5a      	adds	r2, r3, #1
 800045a:	4917      	ldr	r1, [pc, #92]	; (80004b8 <button_reading+0x1e8>)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (counter_for_button_pressed[i] == TIME_OUT_FOR_KEY_PRESSED / TIME_CYCLE)
 8000462:	4a15      	ldr	r2, [pc, #84]	; (80004b8 <button_reading+0x1e8>)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800046a:	2b14      	cmp	r3, #20
 800046c:	d10b      	bne.n	8000486 <button_reading+0x1b6>
                {
                    counter_for_button_pressed[i] = 0;
 800046e:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <button_reading+0x1e8>)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2100      	movs	r1, #0
 8000474:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                }
                break;
 8000478:	e005      	b.n	8000486 <button_reading+0x1b6>
            default:
                break;
 800047a:	bf00      	nop
 800047c:	e004      	b.n	8000488 <button_reading+0x1b8>
                break;
 800047e:	bf00      	nop
 8000480:	e002      	b.n	8000488 <button_reading+0x1b8>
                break;
 8000482:	bf00      	nop
 8000484:	e000      	b.n	8000488 <button_reading+0x1b8>
                break;
 8000486:	bf00      	nop
    for (int i = 0; i < NO_OF_BUTTONS; i++)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	3301      	adds	r3, #1
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2b02      	cmp	r3, #2
 8000492:	f77f af23 	ble.w	80002dc <button_reading+0xc>
            }
        }
    }
}
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	2000019c 	.word	0x2000019c
 80004a0:	200001a8 	.word	0x200001a8
 80004a4:	20000190 	.word	0x20000190
 80004a8:	40010c00 	.word	0x40010c00
 80004ac:	20000184 	.word	0x20000184
 80004b0:	200000fc 	.word	0x200000fc
 80004b4:	200001c0 	.word	0x200001c0
 80004b8:	200001b4 	.word	0x200001b4
 80004bc:	200001cc 	.word	0x200001cc

080004c0 <clearAllLED>:
// current mode
int mode = -1;
// traverse the 7segment led
int led_index = 0;
int isModify = 0;
void clearAllLED(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 1);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2102      	movs	r1, #2
 80004c8:	480e      	ldr	r0, [pc, #56]	; (8000504 <clearAllLED+0x44>)
 80004ca:	f001 f896 	bl	80015fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 1);
 80004ce:	2201      	movs	r2, #1
 80004d0:	2110      	movs	r1, #16
 80004d2:	480c      	ldr	r0, [pc, #48]	; (8000504 <clearAllLED+0x44>)
 80004d4:	f001 f891 	bl	80015fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 1);
 80004d8:	2201      	movs	r2, #1
 80004da:	2104      	movs	r1, #4
 80004dc:	4809      	ldr	r0, [pc, #36]	; (8000504 <clearAllLED+0x44>)
 80004de:	f001 f88c 	bl	80015fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, 1);
 80004e2:	2201      	movs	r2, #1
 80004e4:	2120      	movs	r1, #32
 80004e6:	4807      	ldr	r0, [pc, #28]	; (8000504 <clearAllLED+0x44>)
 80004e8:	f001 f887 	bl	80015fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 1);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2108      	movs	r1, #8
 80004f0:	4804      	ldr	r0, [pc, #16]	; (8000504 <clearAllLED+0x44>)
 80004f2:	f001 f882 	bl	80015fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 1);
 80004f6:	2201      	movs	r2, #1
 80004f8:	2140      	movs	r1, #64	; 0x40
 80004fa:	4802      	ldr	r0, [pc, #8]	; (8000504 <clearAllLED+0x44>)
 80004fc:	f001 f87d 	bl	80015fa <HAL_GPIO_WritePin>
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40010800 	.word	0x40010800

08000508 <run_traffic>:

void run_traffic(){
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	clearAllLED();
 800050c:	f7ff ffd8 	bl	80004c0 <clearAllLED>
	switch(current_state){
 8000510:	4b4f      	ldr	r3, [pc, #316]	; (8000650 <run_traffic+0x148>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b03      	cmp	r3, #3
 8000516:	f200 808f 	bhi.w	8000638 <run_traffic+0x130>
 800051a:	a201      	add	r2, pc, #4	; (adr r2, 8000520 <run_traffic+0x18>)
 800051c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000520:	08000531 	.word	0x08000531
 8000524:	08000573 	.word	0x08000573
 8000528:	080005b5 	.word	0x080005b5
 800052c:	080005f7 	.word	0x080005f7
		case RED1_GREEN2:
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	2102      	movs	r1, #2
 8000534:	4847      	ldr	r0, [pc, #284]	; (8000654 <run_traffic+0x14c>)
 8000536:	f001 f860 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2140      	movs	r1, #64	; 0x40
 800053e:	4845      	ldr	r0, [pc, #276]	; (8000654 <run_traffic+0x14c>)
 8000540:	f001 f85b 	bl	80015fa <HAL_GPIO_WritePin>
			if(road1_timer <= 0){
 8000544:	4b44      	ldr	r3, [pc, #272]	; (8000658 <run_traffic+0x150>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	dc06      	bgt.n	800055a <run_traffic+0x52>
				current_state = RED1_YELLOW2;
 800054c:	4b40      	ldr	r3, [pc, #256]	; (8000650 <run_traffic+0x148>)
 800054e:	2201      	movs	r2, #1
 8000550:	601a      	str	r2, [r3, #0]
				road1_timer = RED_TIME;
 8000552:	4b42      	ldr	r3, [pc, #264]	; (800065c <run_traffic+0x154>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a40      	ldr	r2, [pc, #256]	; (8000658 <run_traffic+0x150>)
 8000558:	6013      	str	r3, [r2, #0]
			}
			if(road2_timer <= 0){
 800055a:	4b41      	ldr	r3, [pc, #260]	; (8000660 <run_traffic+0x158>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	dc6c      	bgt.n	800063c <run_traffic+0x134>
				current_state = RED1_YELLOW2;
 8000562:	4b3b      	ldr	r3, [pc, #236]	; (8000650 <run_traffic+0x148>)
 8000564:	2201      	movs	r2, #1
 8000566:	601a      	str	r2, [r3, #0]
				road2_timer = YELLOW_TIME;
 8000568:	4b3e      	ldr	r3, [pc, #248]	; (8000664 <run_traffic+0x15c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a3c      	ldr	r2, [pc, #240]	; (8000660 <run_traffic+0x158>)
 800056e:	6013      	str	r3, [r2, #0]
			}
			break;
 8000570:	e064      	b.n	800063c <run_traffic+0x134>
		case RED1_YELLOW2:
			HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2102      	movs	r1, #2
 8000576:	4837      	ldr	r0, [pc, #220]	; (8000654 <run_traffic+0x14c>)
 8000578:	f001 f83f 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YELLOW2_GPIO_Port,YELLOW2_Pin, 0);
 800057c:	2200      	movs	r2, #0
 800057e:	2120      	movs	r1, #32
 8000580:	4834      	ldr	r0, [pc, #208]	; (8000654 <run_traffic+0x14c>)
 8000582:	f001 f83a 	bl	80015fa <HAL_GPIO_WritePin>
			if(road1_timer <= 0){
 8000586:	4b34      	ldr	r3, [pc, #208]	; (8000658 <run_traffic+0x150>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	dc06      	bgt.n	800059c <run_traffic+0x94>
				current_state = GREEN1_RED2;
 800058e:	4b30      	ldr	r3, [pc, #192]	; (8000650 <run_traffic+0x148>)
 8000590:	2202      	movs	r2, #2
 8000592:	601a      	str	r2, [r3, #0]
				road1_timer = GREEN_TIME;
 8000594:	4b34      	ldr	r3, [pc, #208]	; (8000668 <run_traffic+0x160>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a2f      	ldr	r2, [pc, #188]	; (8000658 <run_traffic+0x150>)
 800059a:	6013      	str	r3, [r2, #0]
			}
			if(road2_timer <= 0){
 800059c:	4b30      	ldr	r3, [pc, #192]	; (8000660 <run_traffic+0x158>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dc4d      	bgt.n	8000640 <run_traffic+0x138>
				current_state = GREEN1_RED2;
 80005a4:	4b2a      	ldr	r3, [pc, #168]	; (8000650 <run_traffic+0x148>)
 80005a6:	2202      	movs	r2, #2
 80005a8:	601a      	str	r2, [r3, #0]
				road2_timer = RED_TIME;
 80005aa:	4b2c      	ldr	r3, [pc, #176]	; (800065c <run_traffic+0x154>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a2c      	ldr	r2, [pc, #176]	; (8000660 <run_traffic+0x158>)
 80005b0:	6013      	str	r3, [r2, #0]
			}
			break;
 80005b2:	e045      	b.n	8000640 <run_traffic+0x138>
		case GREEN1_RED2:
			HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, 0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2108      	movs	r1, #8
 80005b8:	4826      	ldr	r0, [pc, #152]	; (8000654 <run_traffic+0x14c>)
 80005ba:	f001 f81e 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2110      	movs	r1, #16
 80005c2:	4824      	ldr	r0, [pc, #144]	; (8000654 <run_traffic+0x14c>)
 80005c4:	f001 f819 	bl	80015fa <HAL_GPIO_WritePin>
			if(road1_timer <= 0){
 80005c8:	4b23      	ldr	r3, [pc, #140]	; (8000658 <run_traffic+0x150>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	dc06      	bgt.n	80005de <run_traffic+0xd6>
				current_state = YELLOW1_RED2;
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <run_traffic+0x148>)
 80005d2:	2203      	movs	r2, #3
 80005d4:	601a      	str	r2, [r3, #0]
				road1_timer = YELLOW_TIME;
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <run_traffic+0x15c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a1f      	ldr	r2, [pc, #124]	; (8000658 <run_traffic+0x150>)
 80005dc:	6013      	str	r3, [r2, #0]
			}
			if(road2_timer <= 0){
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <run_traffic+0x158>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	dc2e      	bgt.n	8000644 <run_traffic+0x13c>
				current_state = YELLOW1_RED2;
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <run_traffic+0x148>)
 80005e8:	2203      	movs	r2, #3
 80005ea:	601a      	str	r2, [r3, #0]
				road2_timer = RED_TIME;
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <run_traffic+0x154>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1b      	ldr	r2, [pc, #108]	; (8000660 <run_traffic+0x158>)
 80005f2:	6013      	str	r3, [r2, #0]
			}
			break;
 80005f4:	e026      	b.n	8000644 <run_traffic+0x13c>
		case YELLOW1_RED2:
			HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2104      	movs	r1, #4
 80005fa:	4816      	ldr	r0, [pc, #88]	; (8000654 <run_traffic+0x14c>)
 80005fc:	f000 fffd 	bl	80015fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2110      	movs	r1, #16
 8000604:	4813      	ldr	r0, [pc, #76]	; (8000654 <run_traffic+0x14c>)
 8000606:	f000 fff8 	bl	80015fa <HAL_GPIO_WritePin>
			if(road1_timer <= 0){
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <run_traffic+0x150>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	dc06      	bgt.n	8000620 <run_traffic+0x118>
				current_state = RED1_GREEN2;
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <run_traffic+0x148>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
				road1_timer = RED_TIME;
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <run_traffic+0x154>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a0e      	ldr	r2, [pc, #56]	; (8000658 <run_traffic+0x150>)
 800061e:	6013      	str	r3, [r2, #0]
			}
			if(road2_timer <= 0){
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <run_traffic+0x158>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	dc0f      	bgt.n	8000648 <run_traffic+0x140>
				current_state = RED1_GREEN2;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <run_traffic+0x148>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
				road2_timer = GREEN_TIME;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <run_traffic+0x160>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <run_traffic+0x158>)
 8000634:	6013      	str	r3, [r2, #0]
			}
			break;
 8000636:	e007      	b.n	8000648 <run_traffic+0x140>

		default:
			break;
 8000638:	bf00      	nop
 800063a:	e006      	b.n	800064a <run_traffic+0x142>
			break;
 800063c:	bf00      	nop
 800063e:	e004      	b.n	800064a <run_traffic+0x142>
			break;
 8000640:	bf00      	nop
 8000642:	e002      	b.n	800064a <run_traffic+0x142>
			break;
 8000644:	bf00      	nop
 8000646:	e000      	b.n	800064a <run_traffic+0x142>
			break;
 8000648:	bf00      	nop
	}
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200001d8 	.word	0x200001d8
 8000654:	40010800 	.word	0x40010800
 8000658:	200001dc 	.word	0x200001dc
 800065c:	20000108 	.word	0x20000108
 8000660:	200001e0 	.word	0x200001e0
 8000664:	20000110 	.word	0x20000110
 8000668:	2000010c 	.word	0x2000010c

0800066c <update7SEG>:

void update7SEG(int index)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  switch (index)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b03      	cmp	r3, #3
 8000678:	d852      	bhi.n	8000720 <update7SEG+0xb4>
 800067a:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <update7SEG+0x14>)
 800067c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000680:	08000691 	.word	0x08000691
 8000684:	080006b5 	.word	0x080006b5
 8000688:	080006d9 	.word	0x080006d9
 800068c:	080006fd 	.word	0x080006fd
  {
  case 0:
    display7Seg(led_buffer[0]);
 8000690:	4b26      	ldr	r3, [pc, #152]	; (800072c <update7SEG+0xc0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fda3 	bl	80001e0 <display7Seg>
    HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a0:	4823      	ldr	r0, [pc, #140]	; (8000730 <update7SEG+0xc4>)
 80006a2:	f000 ffaa 	bl	80015fa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ac:	4820      	ldr	r0, [pc, #128]	; (8000730 <update7SEG+0xc4>)
 80006ae:	f000 ffa4 	bl	80015fa <HAL_GPIO_WritePin>
    break;
 80006b2:	e036      	b.n	8000722 <update7SEG+0xb6>
  case 1:
    display7Seg(led_buffer[1]);
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <update7SEG+0xc0>)
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fd91 	bl	80001e0 <display7Seg>
    HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c4:	481a      	ldr	r0, [pc, #104]	; (8000730 <update7SEG+0xc4>)
 80006c6:	f000 ff98 	bl	80015fa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d0:	4817      	ldr	r0, [pc, #92]	; (8000730 <update7SEG+0xc4>)
 80006d2:	f000 ff92 	bl	80015fa <HAL_GPIO_WritePin>
    break;
 80006d6:	e024      	b.n	8000722 <update7SEG+0xb6>
  case 2:
    display7Seg(led_buffer[2]);
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <update7SEG+0xc0>)
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fd7f 	bl	80001e0 <display7Seg>
    HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e8:	4811      	ldr	r0, [pc, #68]	; (8000730 <update7SEG+0xc4>)
 80006ea:	f000 ff86 	bl	80015fa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f4:	480e      	ldr	r0, [pc, #56]	; (8000730 <update7SEG+0xc4>)
 80006f6:	f000 ff80 	bl	80015fa <HAL_GPIO_WritePin>
    break;
 80006fa:	e012      	b.n	8000722 <update7SEG+0xb6>
  case 3:
    display7Seg(led_buffer[3]);
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <update7SEG+0xc0>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fd6d 	bl	80001e0 <display7Seg>
    HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070c:	4808      	ldr	r0, [pc, #32]	; (8000730 <update7SEG+0xc4>)
 800070e:	f000 ff74 	bl	80015fa <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <update7SEG+0xc4>)
 800071a:	f000 ff6e 	bl	80015fa <HAL_GPIO_WritePin>
    break;
 800071e:	e000      	b.n	8000722 <update7SEG+0xb6>
  default:
    break;
 8000720:	bf00      	nop
  }
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200001f0 	.word	0x200001f0
 8000730:	40010c00 	.word	0x40010c00

08000734 <set_up_led_buffer>:
void set_up_led_buffer(int num1, int num2){
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	led_buffer[0] = num1 / 10;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <set_up_led_buffer+0x70>)
 8000742:	fb82 1203 	smull	r1, r2, r2, r3
 8000746:	1092      	asrs	r2, r2, #2
 8000748:	17db      	asrs	r3, r3, #31
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	4a16      	ldr	r2, [pc, #88]	; (80007a8 <set_up_led_buffer+0x74>)
 800074e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num1 % 10;
 8000750:	6879      	ldr	r1, [r7, #4]
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <set_up_led_buffer+0x70>)
 8000754:	fb83 2301 	smull	r2, r3, r3, r1
 8000758:	109a      	asrs	r2, r3, #2
 800075a:	17cb      	asrs	r3, r1, #31
 800075c:	1ad2      	subs	r2, r2, r3
 800075e:	4613      	mov	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	4413      	add	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	1aca      	subs	r2, r1, r3
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <set_up_led_buffer+0x74>)
 800076a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = num2 / 10;
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <set_up_led_buffer+0x70>)
 8000770:	fb82 1203 	smull	r1, r2, r2, r3
 8000774:	1092      	asrs	r2, r2, #2
 8000776:	17db      	asrs	r3, r3, #31
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <set_up_led_buffer+0x74>)
 800077c:	6093      	str	r3, [r2, #8]
	led_buffer[3] = num2 % 10;
 800077e:	6839      	ldr	r1, [r7, #0]
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <set_up_led_buffer+0x70>)
 8000782:	fb83 2301 	smull	r2, r3, r3, r1
 8000786:	109a      	asrs	r2, r3, #2
 8000788:	17cb      	asrs	r3, r1, #31
 800078a:	1ad2      	subs	r2, r2, r3
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	1aca      	subs	r2, r1, r3
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <set_up_led_buffer+0x74>)
 8000798:	60da      	str	r2, [r3, #12]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	66666667 	.word	0x66666667
 80007a8:	200001f0 	.word	0x200001f0

080007ac <display_4LED>:

void display_4LED(){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	update7SEG(led_index);
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <display_4LED+0x2c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff59 	bl	800066c <update7SEG>
	led_index++;
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <display_4LED+0x2c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	3301      	adds	r3, #1
 80007c0:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <display_4LED+0x2c>)
 80007c2:	6013      	str	r3, [r2, #0]
	if(led_index > 3) led_index = 0;
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <display_4LED+0x2c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	dd02      	ble.n	80007d2 <display_4LED+0x26>
 80007cc:	4b02      	ldr	r3, [pc, #8]	; (80007d8 <display_4LED+0x2c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000210 	.word	0x20000210

080007dc <blinking_led_mode>:

void blinking_led_mode(int index){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(led1_array_port[mode], led1_array_pin[mode]);
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <blinking_led_mode+0x48>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <blinking_led_mode+0x4c>)
 80007ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <blinking_led_mode+0x48>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	490e      	ldr	r1, [pc, #56]	; (800082c <blinking_led_mode+0x50>)
 80007f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007f8:	4619      	mov	r1, r3
 80007fa:	4610      	mov	r0, r2
 80007fc:	f000 ff15 	bl	800162a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(led2_array_port[mode], led2_array_pin[mode]);
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <blinking_led_mode+0x48>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <blinking_led_mode+0x54>)
 8000806:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <blinking_led_mode+0x48>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4909      	ldr	r1, [pc, #36]	; (8000834 <blinking_led_mode+0x58>)
 8000810:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000814:	4619      	mov	r1, r3
 8000816:	4610      	mov	r0, r2
 8000818:	f000 ff07 	bl	800162a <HAL_GPIO_TogglePin>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	2000013c 	.word	0x2000013c
 8000828:	20000114 	.word	0x20000114
 800082c:	2000012c 	.word	0x2000012c
 8000830:	20000120 	.word	0x20000120
 8000834:	20000134 	.word	0x20000134

08000838 <checkValid>:
int checkValid(){
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
	return (time_array[0] == time_array[1] + time_array[2]);
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <checkValid+0x24>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <checkValid+0x24>)
 8000842:	6859      	ldr	r1, [r3, #4]
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <checkValid+0x24>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	440b      	add	r3, r1
 800084a:	429a      	cmp	r2, r3
 800084c:	bf0c      	ite	eq
 800084e:	2301      	moveq	r3, #1
 8000850:	2300      	movne	r3, #0
 8000852:	b2db      	uxtb	r3, r3
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	200001e4 	.word	0x200001e4

08000860 <checkButton>:
void checkButton(){
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	if(isButtonPress(0)){
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff fd19 	bl	800029c <isButtonPress>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d049      	beq.n	8000904 <checkButton+0xa4>
		mode++;
 8000870:	4b3b      	ldr	r3, [pc, #236]	; (8000960 <checkButton+0x100>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	4a3a      	ldr	r2, [pc, #232]	; (8000960 <checkButton+0x100>)
 8000878:	6013      	str	r3, [r2, #0]
		mode%=3;
 800087a:	4b39      	ldr	r3, [pc, #228]	; (8000960 <checkButton+0x100>)
 800087c:	6819      	ldr	r1, [r3, #0]
 800087e:	4b39      	ldr	r3, [pc, #228]	; (8000964 <checkButton+0x104>)
 8000880:	fb83 3201 	smull	r3, r2, r3, r1
 8000884:	17cb      	asrs	r3, r1, #31
 8000886:	1ad2      	subs	r2, r2, r3
 8000888:	4613      	mov	r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	4413      	add	r3, r2
 800088e:	1aca      	subs	r2, r1, r3
 8000890:	4b33      	ldr	r3, [pc, #204]	; (8000960 <checkButton+0x100>)
 8000892:	601a      	str	r2, [r3, #0]
		isModify++;
 8000894:	4b34      	ldr	r3, [pc, #208]	; (8000968 <checkButton+0x108>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3301      	adds	r3, #1
 800089a:	4a33      	ldr	r2, [pc, #204]	; (8000968 <checkButton+0x108>)
 800089c:	6013      	str	r3, [r2, #0]
		isModify%=4;
 800089e:	4b32      	ldr	r3, [pc, #200]	; (8000968 <checkButton+0x108>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	425a      	negs	r2, r3
 80008a4:	f003 0303 	and.w	r3, r3, #3
 80008a8:	f002 0203 	and.w	r2, r2, #3
 80008ac:	bf58      	it	pl
 80008ae:	4253      	negpl	r3, r2
 80008b0:	4a2d      	ldr	r2, [pc, #180]	; (8000968 <checkButton+0x108>)
 80008b2:	6013      	str	r3, [r2, #0]
		if(isModify == 0){
 80008b4:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <checkButton+0x108>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d121      	bne.n	8000900 <checkButton+0xa0>
			mode = -1;
 80008bc:	4b28      	ldr	r3, [pc, #160]	; (8000960 <checkButton+0x100>)
 80008be:	f04f 32ff 	mov.w	r2, #4294967295
 80008c2:	601a      	str	r2, [r3, #0]
			if(checkValid() == 1){
 80008c4:	f7ff ffb8 	bl	8000838 <checkValid>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d10c      	bne.n	80008e8 <checkButton+0x88>
				RED_TIME = time_array[0];
 80008ce:	4b27      	ldr	r3, [pc, #156]	; (800096c <checkButton+0x10c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a27      	ldr	r2, [pc, #156]	; (8000970 <checkButton+0x110>)
 80008d4:	6013      	str	r3, [r2, #0]
				YELLOW_TIME = time_array[1];
 80008d6:	4b25      	ldr	r3, [pc, #148]	; (800096c <checkButton+0x10c>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	4a26      	ldr	r2, [pc, #152]	; (8000974 <checkButton+0x114>)
 80008dc:	6013      	str	r3, [r2, #0]
				GREEN_TIME = time_array[2];
 80008de:	4b23      	ldr	r3, [pc, #140]	; (800096c <checkButton+0x10c>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	4a25      	ldr	r2, [pc, #148]	; (8000978 <checkButton+0x118>)
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	e00b      	b.n	8000900 <checkButton+0xa0>
			}
			else{
				time_array[0] = RED_TIME;
 80008e8:	4b21      	ldr	r3, [pc, #132]	; (8000970 <checkButton+0x110>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a1f      	ldr	r2, [pc, #124]	; (800096c <checkButton+0x10c>)
 80008ee:	6013      	str	r3, [r2, #0]
				time_array[1] = YELLOW_TIME;
 80008f0:	4b20      	ldr	r3, [pc, #128]	; (8000974 <checkButton+0x114>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a1d      	ldr	r2, [pc, #116]	; (800096c <checkButton+0x10c>)
 80008f6:	6053      	str	r3, [r2, #4]
				time_array[2] = GREEN_TIME;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <checkButton+0x118>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a1b      	ldr	r2, [pc, #108]	; (800096c <checkButton+0x10c>)
 80008fe:	6093      	str	r3, [r2, #8]
			}
		}
		clearAllLED();
 8000900:	f7ff fdde 	bl	80004c0 <clearAllLED>
	}
	if(isButtonPress(1)){
 8000904:	2001      	movs	r0, #1
 8000906:	f7ff fcc9 	bl	800029c <isButtonPress>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d008      	beq.n	8000922 <checkButton+0xc2>
		dumb_val[mode]++;
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <checkButton+0x100>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a19      	ldr	r2, [pc, #100]	; (800097c <checkButton+0x11c>)
 8000916:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800091a:	3201      	adds	r2, #1
 800091c:	4917      	ldr	r1, [pc, #92]	; (800097c <checkButton+0x11c>)
 800091e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
	if(isButtonPress(2)){
 8000922:	2002      	movs	r0, #2
 8000924:	f7ff fcba 	bl	800029c <isButtonPress>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d015      	beq.n	800095a <checkButton+0xfa>
		time_array[mode] += dumb_val[mode];
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <checkButton+0x100>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <checkButton+0x10c>)
 8000934:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <checkButton+0x100>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a0f      	ldr	r2, [pc, #60]	; (800097c <checkButton+0x11c>)
 800093e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <checkButton+0x100>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	440a      	add	r2, r1
 8000948:	4908      	ldr	r1, [pc, #32]	; (800096c <checkButton+0x10c>)
 800094a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		dumb_val[mode] = 0;
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <checkButton+0x100>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <checkButton+0x11c>)
 8000954:	2100      	movs	r1, #0
 8000956:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000013c 	.word	0x2000013c
 8000964:	55555556 	.word	0x55555556
 8000968:	20000214 	.word	0x20000214
 800096c:	200001e4 	.word	0x200001e4
 8000970:	20000108 	.word	0x20000108
 8000974:	20000110 	.word	0x20000110
 8000978:	2000010c 	.word	0x2000010c
 800097c:	20000200 	.word	0x20000200

08000980 <run_led_traffic>:
void run_led_traffic(){
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	if(isModify == 0){
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <run_led_traffic+0x34>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d111      	bne.n	80009b0 <run_led_traffic+0x30>
		road1_timer--;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <run_led_traffic+0x38>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3b01      	subs	r3, #1
 8000992:	4a09      	ldr	r2, [pc, #36]	; (80009b8 <run_led_traffic+0x38>)
 8000994:	6013      	str	r3, [r2, #0]
		road2_timer--;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <run_led_traffic+0x3c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	3b01      	subs	r3, #1
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <run_led_traffic+0x3c>)
 800099e:	6013      	str	r3, [r2, #0]
		set_up_led_buffer(road1_timer,road2_timer);
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <run_led_traffic+0x38>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a05      	ldr	r2, [pc, #20]	; (80009bc <run_led_traffic+0x3c>)
 80009a6:	6812      	ldr	r2, [r2, #0]
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fec2 	bl	8000734 <set_up_led_buffer>
	}
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000214 	.word	0x20000214
 80009b8:	200001dc 	.word	0x200001dc
 80009bc:	200001e0 	.word	0x200001e0

080009c0 <modify_mode>:

void modify_mode(){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	if(isModify != 0)
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <modify_mode+0x1c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d004      	beq.n	80009d6 <modify_mode+0x16>
		blinking_led_mode(mode);
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <modify_mode+0x20>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff03 	bl	80007dc <blinking_led_mode>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000214 	.word	0x20000214
 80009e0:	2000013c 	.word	0x2000013c

080009e4 <fsm>:

void fsm(){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	if(isModify == 0)
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <fsm+0x38>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <fsm+0x12>
		run_traffic();
 80009f0:	f7ff fd8a 	bl	8000508 <run_traffic>
	else {
		set_up_led_buffer(time_array[mode] + dumb_val[mode], mode);
	}
}
 80009f4:	e010      	b.n	8000a18 <fsm+0x34>
		set_up_led_buffer(time_array[mode] + dumb_val[mode], mode);
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <fsm+0x3c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <fsm+0x40>)
 80009fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <fsm+0x3c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4908      	ldr	r1, [pc, #32]	; (8000a28 <fsm+0x44>)
 8000a06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <fsm+0x3c>)
 8000a0e:	6812      	ldr	r2, [r2, #0]
 8000a10:	4611      	mov	r1, r2
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fe8e 	bl	8000734 <set_up_led_buffer>
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000214 	.word	0x20000214
 8000a20:	2000013c 	.word	0x2000013c
 8000a24:	200001e4 	.word	0x200001e4
 8000a28:	20000200 	.word	0x20000200

08000a2c <init>:
void init(){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	time_array[0] = RED_TIME;
 8000a30:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <init+0x6c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <init+0x70>)
 8000a36:	6013      	str	r3, [r2, #0]
	time_array[1] = YELLOW_TIME;
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <init+0x74>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <init+0x70>)
 8000a3e:	6053      	str	r3, [r2, #4]
	time_array[2] = GREEN_TIME;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <init+0x78>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a15      	ldr	r2, [pc, #84]	; (8000a9c <init+0x70>)
 8000a46:	6093      	str	r3, [r2, #8]
	clearAllLED();
 8000a48:	f7ff fd3a 	bl	80004c0 <clearAllLED>
	road1_timer = RED_TIME;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <init+0x6c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <init+0x7c>)
 8000a52:	6013      	str	r3, [r2, #0]
	road2_timer = GREEN_TIME;
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <init+0x78>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <init+0x80>)
 8000a5a:	6013      	str	r3, [r2, #0]
	run_traffic();
 8000a5c:	f7ff fd54 	bl	8000508 <run_traffic>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a66:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <init+0x84>)
 8000a68:	f000 fdc7 	bl	80015fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a72:	480f      	ldr	r0, [pc, #60]	; (8000ab0 <init+0x84>)
 8000a74:	f000 fdc1 	bl	80015fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7e:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <init+0x84>)
 8000a80:	f000 fdbb 	bl	80015fa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8a:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <init+0x84>)
 8000a8c:	f000 fdb5 	bl	80015fa <HAL_GPIO_WritePin>
	display_4LED();
 8000a90:	f7ff fe8c 	bl	80007ac <display_4LED>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000108 	.word	0x20000108
 8000a9c:	200001e4 	.word	0x200001e4
 8000aa0:	20000110 	.word	0x20000110
 8000aa4:	2000010c 	.word	0x2000010c
 8000aa8:	200001dc 	.word	0x200001dc
 8000aac:	200001e0 	.word	0x200001e0
 8000ab0:	40010c00 	.word	0x40010c00

08000ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab8:	f000 fa9c 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000abc:	f000 f846 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac0:	f000 f8cc 	bl	8000c5c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ac4:	f000 f87e 	bl	8000bc4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ac8:	481b      	ldr	r0, [pc, #108]	; (8000b38 <main+0x84>)
 8000aca:	f001 f9f5 	bl	8001eb8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init();
 8000ace:	f7ff ffad 	bl	8000a2c <init>
  setTimer1(100);
 8000ad2:	2064      	movs	r0, #100	; 0x64
 8000ad4:	f000 f9c2 	bl	8000e5c <setTimer1>
  setTimer2(25);
 8000ad8:	2019      	movs	r0, #25
 8000ada:	f000 f9d3 	bl	8000e84 <setTimer2>
  setTimer3(10);
 8000ade:	200a      	movs	r0, #10
 8000ae0:	f000 f9e4 	bl	8000eac <setTimer3>
  setTimer4(50);
 8000ae4:	2032      	movs	r0, #50	; 0x32
 8000ae6:	f000 f9f5 	bl	8000ed4 <setTimer4>
  while (1)
  {
	  if(timer1_flag == 1){
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <main+0x88>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d104      	bne.n	8000afc <main+0x48>
		  run_led_traffic();
 8000af2:	f7ff ff45 	bl	8000980 <run_led_traffic>
		  setTimer1(100);
 8000af6:	2064      	movs	r0, #100	; 0x64
 8000af8:	f000 f9b0 	bl	8000e5c <setTimer1>
	  }
	  if(timer4_flag == 1){
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <main+0x8c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d104      	bne.n	8000b0e <main+0x5a>
		 modify_mode();
 8000b04:	f7ff ff5c 	bl	80009c0 <modify_mode>
		 setTimer4(50);
 8000b08:	2032      	movs	r0, #50	; 0x32
 8000b0a:	f000 f9e3 	bl	8000ed4 <setTimer4>
	  }
	  if(timer2_flag == 1){
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <main+0x90>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d104      	bne.n	8000b20 <main+0x6c>
		  display_4LED();
 8000b16:	f7ff fe49 	bl	80007ac <display_4LED>
		  setTimer2(25);
 8000b1a:	2019      	movs	r0, #25
 8000b1c:	f000 f9b2 	bl	8000e84 <setTimer2>
	  }
	  if(timer3_flag == 1){
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <main+0x94>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d1e0      	bne.n	8000aea <main+0x36>
		  checkButton();
 8000b28:	f7ff fe9a 	bl	8000860 <checkButton>
		  fsm();
 8000b2c:	f7ff ff5a 	bl	80009e4 <fsm>
		  setTimer3(10);
 8000b30:	200a      	movs	r0, #10
 8000b32:	f000 f9bb 	bl	8000eac <setTimer3>
	  if(timer1_flag == 1){
 8000b36:	e7d8      	b.n	8000aea <main+0x36>
 8000b38:	20000218 	.word	0x20000218
 8000b3c:	20000260 	.word	0x20000260
 8000b40:	20000278 	.word	0x20000278
 8000b44:	20000268 	.word	0x20000268
 8000b48:	20000270 	.word	0x20000270

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b090      	sub	sp, #64	; 0x40
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0318 	add.w	r3, r7, #24
 8000b56:	2228      	movs	r2, #40	; 0x28
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 fd44 	bl	80025e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b72:	2301      	movs	r3, #1
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b76:	2310      	movs	r3, #16
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7e:	f107 0318 	add.w	r3, r7, #24
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 fd6a 	bl	800165c <HAL_RCC_OscConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b8e:	f000 f8d1 	bl	8000d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b92:	230f      	movs	r3, #15
 8000b94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 ffd8 	bl	8001b60 <HAL_RCC_ClockConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bb6:	f000 f8bd 	bl	8000d34 <Error_Handler>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3740      	adds	r7, #64	; 0x40
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd8:	463b      	mov	r3, r7
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <MX_TIM2_Init+0x94>)
 8000be2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <MX_TIM2_Init+0x94>)
 8000bea:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_TIM2_Init+0x94>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <MX_TIM2_Init+0x94>)
 8000bf8:	2209      	movs	r2, #9
 8000bfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_TIM2_Init+0x94>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <MX_TIM2_Init+0x94>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c08:	4813      	ldr	r0, [pc, #76]	; (8000c58 <MX_TIM2_Init+0x94>)
 8000c0a:	f001 f905 	bl	8001e18 <HAL_TIM_Base_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c14:	f000 f88e 	bl	8000d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	4619      	mov	r1, r3
 8000c24:	480c      	ldr	r0, [pc, #48]	; (8000c58 <MX_TIM2_Init+0x94>)
 8000c26:	f001 fa9b 	bl	8002160 <HAL_TIM_ConfigClockSource>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c30:	f000 f880 	bl	8000d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_TIM2_Init+0x94>)
 8000c42:	f001 fc67 	bl	8002514 <HAL_TIMEx_MasterConfigSynchronization>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c4c:	f000 f872 	bl	8000d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000218 	.word	0x20000218

08000c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <MX_GPIO_Init+0xb4>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a26      	ldr	r2, [pc, #152]	; (8000d10 <MX_GPIO_Init+0xb4>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <MX_GPIO_Init+0xb4>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c88:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_GPIO_Init+0xb4>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a20      	ldr	r2, [pc, #128]	; (8000d10 <MX_GPIO_Init+0xb4>)
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <MX_GPIO_Init+0xb4>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	217e      	movs	r1, #126	; 0x7e
 8000ca4:	481b      	ldr	r0, [pc, #108]	; (8000d14 <MX_GPIO_Init+0xb8>)
 8000ca6:	f000 fca8 	bl	80015fa <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000caa:	2200      	movs	r2, #0
 8000cac:	f643 71f8 	movw	r1, #16376	; 0x3ff8
 8000cb0:	4819      	ldr	r0, [pc, #100]	; (8000d18 <MX_GPIO_Init+0xbc>)
 8000cb2:	f000 fca2 	bl	80015fa <HAL_GPIO_WritePin>
                          |SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000cb6:	237e      	movs	r3, #126	; 0x7e
 8000cb8:	60bb      	str	r3, [r7, #8]
                          |YELLOW2_Pin|GREEN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4811      	ldr	r0, [pc, #68]	; (8000d14 <MX_GPIO_Init+0xb8>)
 8000cce:	f000 fb01 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480c      	ldr	r0, [pc, #48]	; (8000d18 <MX_GPIO_Init+0xbc>)
 8000ce6:	f000 faf5 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000cea:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 8000cee:	60bb      	str	r3, [r7, #8]
                          |SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	4619      	mov	r1, r3
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_GPIO_Init+0xbc>)
 8000d04:	f000 fae6 	bl	80012d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010800 	.word	0x40010800
 8000d18:	40010c00 	.word	0x40010c00

08000d1c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int counter = 100;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	timerRun();
 8000d24:	f000 f8ea 	bl	8000efc <timerRun>
	button_reading();
 8000d28:	f7ff fad2 	bl	80002d0 <button_reading>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d38:	b672      	cpsid	i
}
 8000d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <Error_Handler+0x8>
	...

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6193      	str	r3, [r2, #24]
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	61d3      	str	r3, [r2, #28]
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_MspInit+0x5c>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_MspInit+0x60>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_MspInit+0x60>)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010000 	.word	0x40010000

08000da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db4:	d113      	bne.n	8000dde <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_TIM_Base_MspInit+0x44>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <HAL_TIM_Base_MspInit+0x44>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	61d3      	str	r3, [r2, #28]
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_TIM_Base_MspInit+0x44>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	201c      	movs	r0, #28
 8000dd4:	f000 fa47 	bl	8001266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dd8:	201c      	movs	r0, #28
 8000dda:	f000 fa60 	bl	800129e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr

08000e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e32:	f000 f925 	bl	8001080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <TIM2_IRQHandler+0x10>)
 8000e42:	f001 f885 	bl	8001f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000218 	.word	0x20000218

08000e50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <setTimer1>:
int timer3_duration;

int timer4_flag = 0;
int timer4_duration;

void setTimer1(int duration){
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
    timer1_duration = duration;
 8000e64:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <setTimer1+0x20>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
    timer1_flag = 0;
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <setTimer1+0x24>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000264 	.word	0x20000264
 8000e80:	20000260 	.word	0x20000260

08000e84 <setTimer2>:

void setTimer2(int duration){
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    timer2_duration = duration;
 8000e8c:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <setTimer2+0x20>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
    timer2_flag = 0;
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <setTimer2+0x24>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	2000026c 	.word	0x2000026c
 8000ea8:	20000268 	.word	0x20000268

08000eac <setTimer3>:

void setTimer3(int duration){
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    timer3_duration = duration;
 8000eb4:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <setTimer3+0x20>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
    timer3_flag = 0;
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <setTimer3+0x24>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000274 	.word	0x20000274
 8000ed0:	20000270 	.word	0x20000270

08000ed4 <setTimer4>:

void setTimer4(int duration){
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    timer4_duration = duration;
 8000edc:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <setTimer4+0x20>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
    timer4_flag = 0;
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <setTimer4+0x24>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	2000027c 	.word	0x2000027c
 8000ef8:	20000278 	.word	0x20000278

08000efc <timerRun>:
void timerRun(){
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
    if(timer1_duration > 0){
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <timerRun+0x8c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	dd0b      	ble.n	8000f20 <timerRun+0x24>
        timer1_duration--;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <timerRun+0x8c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	4a1e      	ldr	r2, [pc, #120]	; (8000f88 <timerRun+0x8c>)
 8000f10:	6013      	str	r3, [r2, #0]
        if(timer1_duration <= 0){
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <timerRun+0x8c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	dc02      	bgt.n	8000f20 <timerRun+0x24>
            timer1_flag = 1;
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <timerRun+0x90>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
        }
    }
     if(timer2_duration > 0){
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <timerRun+0x94>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	dd0b      	ble.n	8000f40 <timerRun+0x44>
        timer2_duration--;
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <timerRun+0x94>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <timerRun+0x94>)
 8000f30:	6013      	str	r3, [r2, #0]
        if(timer2_duration <= 0){
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <timerRun+0x94>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	dc02      	bgt.n	8000f40 <timerRun+0x44>
            timer2_flag = 1;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <timerRun+0x98>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]

        }
    }
    if(timer3_duration > 0){
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <timerRun+0x9c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	dd0b      	ble.n	8000f60 <timerRun+0x64>
        timer3_duration--;
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <timerRun+0x9c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <timerRun+0x9c>)
 8000f50:	6013      	str	r3, [r2, #0]
        if(timer3_duration <= 0){
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <timerRun+0x9c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	dc02      	bgt.n	8000f60 <timerRun+0x64>
            timer3_flag = 1;
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <timerRun+0xa0>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]

        }
    }
    if(timer4_duration > 0){
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <timerRun+0xa4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	dd0b      	ble.n	8000f80 <timerRun+0x84>
            timer4_duration--;
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <timerRun+0xa4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <timerRun+0xa4>)
 8000f70:	6013      	str	r3, [r2, #0]
            if(timer4_duration <= 0){
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <timerRun+0xa4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	dc02      	bgt.n	8000f80 <timerRun+0x84>
                timer4_flag = 1;
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <timerRun+0xa8>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]

            }
        }
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	20000264 	.word	0x20000264
 8000f8c:	20000260 	.word	0x20000260
 8000f90:	2000026c 	.word	0x2000026c
 8000f94:	20000268 	.word	0x20000268
 8000f98:	20000274 	.word	0x20000274
 8000f9c:	20000270 	.word	0x20000270
 8000fa0:	2000027c 	.word	0x2000027c
 8000fa4:	20000278 	.word	0x20000278

08000fa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fa8:	f7ff ff52 	bl	8000e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fac:	480b      	ldr	r0, [pc, #44]	; (8000fdc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fae:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fc4:	4c09      	ldr	r4, [pc, #36]	; (8000fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f001 fb11 	bl	80025f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fd6:	f7ff fd6d 	bl	8000ab4 <main>
  bx lr
 8000fda:	4770      	bx	lr
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000fe4:	08002684 	.word	0x08002684
  ldr r2, =_sbss
 8000fe8:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000fec:	20000284 	.word	0x20000284

08000ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC1_2_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_Init+0x28>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <HAL_Init+0x28>)
 8000ffe:	f043 0310 	orr.w	r3, r3, #16
 8001002:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f923 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100a:	200f      	movs	r0, #15
 800100c:	f000 f808 	bl	8001020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001010:	f7ff fe96 	bl	8000d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40022000 	.word	0x40022000

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x54>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0x58>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f93b 	bl	80012ba <HAL_SYSTICK_Config>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e00e      	b.n	800106c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0f      	cmp	r3, #15
 8001052:	d80a      	bhi.n	800106a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001054:	2200      	movs	r2, #0
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f000 f903 	bl	8001266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <HAL_InitTick+0x5c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000140 	.word	0x20000140
 8001078:	20000148 	.word	0x20000148
 800107c:	20000144 	.word	0x20000144

08001080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_IncTick+0x1c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x20>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <HAL_IncTick+0x20>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	20000148 	.word	0x20000148
 80010a0:	20000280 	.word	0x20000280

080010a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b02      	ldr	r3, [pc, #8]	; (80010b4 <HAL_GetTick+0x10>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	20000280 	.word	0x20000280

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4906      	ldr	r1, [pc, #24]	; (8001150 <__NVIC_EnableIRQ+0x34>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	; (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800121c:	d301      	bcc.n	8001222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121e:	2301      	movs	r3, #1
 8001220:	e00f      	b.n	8001242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <SysTick_Config+0x40>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122a:	210f      	movs	r1, #15
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f7ff ff90 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <SysTick_Config+0x40>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <SysTick_Config+0x40>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff2d 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001278:	f7ff ff42 	bl	8001100 <__NVIC_GetPriorityGrouping>
 800127c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff ff90 	bl	80011a8 <NVIC_EncodePriority>
 8001288:	4602      	mov	r2, r0
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff5f 	bl	8001154 <__NVIC_SetPriority>
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff35 	bl	800111c <__NVIC_EnableIRQ>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffa2 	bl	800120c <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b08b      	sub	sp, #44	; 0x2c
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e6:	e161      	b.n	80015ac <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012e8:	2201      	movs	r2, #1
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 8150 	bne.w	80015a6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4a97      	ldr	r2, [pc, #604]	; (8001568 <HAL_GPIO_Init+0x294>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d05e      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001310:	4a95      	ldr	r2, [pc, #596]	; (8001568 <HAL_GPIO_Init+0x294>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d875      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001316:	4a95      	ldr	r2, [pc, #596]	; (800156c <HAL_GPIO_Init+0x298>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d058      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 800131c:	4a93      	ldr	r2, [pc, #588]	; (800156c <HAL_GPIO_Init+0x298>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d86f      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001322:	4a93      	ldr	r2, [pc, #588]	; (8001570 <HAL_GPIO_Init+0x29c>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d052      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001328:	4a91      	ldr	r2, [pc, #580]	; (8001570 <HAL_GPIO_Init+0x29c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d869      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800132e:	4a91      	ldr	r2, [pc, #580]	; (8001574 <HAL_GPIO_Init+0x2a0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d04c      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001334:	4a8f      	ldr	r2, [pc, #572]	; (8001574 <HAL_GPIO_Init+0x2a0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d863      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800133a:	4a8f      	ldr	r2, [pc, #572]	; (8001578 <HAL_GPIO_Init+0x2a4>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d046      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
 8001340:	4a8d      	ldr	r2, [pc, #564]	; (8001578 <HAL_GPIO_Init+0x2a4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d85d      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 8001346:	2b12      	cmp	r3, #18
 8001348:	d82a      	bhi.n	80013a0 <HAL_GPIO_Init+0xcc>
 800134a:	2b12      	cmp	r3, #18
 800134c:	d859      	bhi.n	8001402 <HAL_GPIO_Init+0x12e>
 800134e:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <HAL_GPIO_Init+0x80>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	080013cf 	.word	0x080013cf
 8001358:	080013a9 	.word	0x080013a9
 800135c:	080013bb 	.word	0x080013bb
 8001360:	080013fd 	.word	0x080013fd
 8001364:	08001403 	.word	0x08001403
 8001368:	08001403 	.word	0x08001403
 800136c:	08001403 	.word	0x08001403
 8001370:	08001403 	.word	0x08001403
 8001374:	08001403 	.word	0x08001403
 8001378:	08001403 	.word	0x08001403
 800137c:	08001403 	.word	0x08001403
 8001380:	08001403 	.word	0x08001403
 8001384:	08001403 	.word	0x08001403
 8001388:	08001403 	.word	0x08001403
 800138c:	08001403 	.word	0x08001403
 8001390:	08001403 	.word	0x08001403
 8001394:	08001403 	.word	0x08001403
 8001398:	080013b1 	.word	0x080013b1
 800139c:	080013c5 	.word	0x080013c5
 80013a0:	4a76      	ldr	r2, [pc, #472]	; (800157c <HAL_GPIO_Init+0x2a8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d013      	beq.n	80013ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013a6:	e02c      	b.n	8001402 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	623b      	str	r3, [r7, #32]
          break;
 80013ae:	e029      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	3304      	adds	r3, #4
 80013b6:	623b      	str	r3, [r7, #32]
          break;
 80013b8:	e024      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	3308      	adds	r3, #8
 80013c0:	623b      	str	r3, [r7, #32]
          break;
 80013c2:	e01f      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	330c      	adds	r3, #12
 80013ca:	623b      	str	r3, [r7, #32]
          break;
 80013cc:	e01a      	b.n	8001404 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013d6:	2304      	movs	r3, #4
 80013d8:	623b      	str	r3, [r7, #32]
          break;
 80013da:	e013      	b.n	8001404 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d105      	bne.n	80013f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e4:	2308      	movs	r3, #8
 80013e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	611a      	str	r2, [r3, #16]
          break;
 80013ee:	e009      	b.n	8001404 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013f0:	2308      	movs	r3, #8
 80013f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69fa      	ldr	r2, [r7, #28]
 80013f8:	615a      	str	r2, [r3, #20]
          break;
 80013fa:	e003      	b.n	8001404 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
          break;
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x130>
          break;
 8001402:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	2bff      	cmp	r3, #255	; 0xff
 8001408:	d801      	bhi.n	800140e <HAL_GPIO_Init+0x13a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	e001      	b.n	8001412 <HAL_GPIO_Init+0x13e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3304      	adds	r3, #4
 8001412:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2bff      	cmp	r3, #255	; 0xff
 8001418:	d802      	bhi.n	8001420 <HAL_GPIO_Init+0x14c>
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	e002      	b.n	8001426 <HAL_GPIO_Init+0x152>
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	3b08      	subs	r3, #8
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	210f      	movs	r1, #15
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	401a      	ands	r2, r3
 8001438:	6a39      	ldr	r1, [r7, #32]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	431a      	orrs	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 80a9 	beq.w	80015a6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001454:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <HAL_GPIO_Init+0x2ac>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a49      	ldr	r2, [pc, #292]	; (8001580 <HAL_GPIO_Init+0x2ac>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b47      	ldr	r3, [pc, #284]	; (8001580 <HAL_GPIO_Init+0x2ac>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800146c:	4a45      	ldr	r2, [pc, #276]	; (8001584 <HAL_GPIO_Init+0x2b0>)
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	089b      	lsrs	r3, r3, #2
 8001472:	3302      	adds	r3, #2
 8001474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001478:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	220f      	movs	r2, #15
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a3d      	ldr	r2, [pc, #244]	; (8001588 <HAL_GPIO_Init+0x2b4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d00d      	beq.n	80014b4 <HAL_GPIO_Init+0x1e0>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a3c      	ldr	r2, [pc, #240]	; (800158c <HAL_GPIO_Init+0x2b8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d007      	beq.n	80014b0 <HAL_GPIO_Init+0x1dc>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a3b      	ldr	r2, [pc, #236]	; (8001590 <HAL_GPIO_Init+0x2bc>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d101      	bne.n	80014ac <HAL_GPIO_Init+0x1d8>
 80014a8:	2302      	movs	r3, #2
 80014aa:	e004      	b.n	80014b6 <HAL_GPIO_Init+0x1e2>
 80014ac:	2303      	movs	r3, #3
 80014ae:	e002      	b.n	80014b6 <HAL_GPIO_Init+0x1e2>
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <HAL_GPIO_Init+0x1e2>
 80014b4:	2300      	movs	r3, #0
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	f002 0203 	and.w	r2, r2, #3
 80014bc:	0092      	lsls	r2, r2, #2
 80014be:	4093      	lsls	r3, r2
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014c6:	492f      	ldr	r1, [pc, #188]	; (8001584 <HAL_GPIO_Init+0x2b0>)
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d006      	beq.n	80014ee <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e0:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	492b      	ldr	r1, [pc, #172]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	608b      	str	r3, [r1, #8]
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ee:	4b29      	ldr	r3, [pc, #164]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	4927      	ldr	r1, [pc, #156]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d006      	beq.n	8001516 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	4921      	ldr	r1, [pc, #132]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	60cb      	str	r3, [r1, #12]
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001516:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 8001518:	68da      	ldr	r2, [r3, #12]
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	43db      	mvns	r3, r3
 800151e:	491d      	ldr	r1, [pc, #116]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 8001520:	4013      	ands	r3, r2
 8001522:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4917      	ldr	r1, [pc, #92]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	43db      	mvns	r3, r3
 8001546:	4913      	ldr	r1, [pc, #76]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 8001548:	4013      	ands	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d01f      	beq.n	8001598 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	490d      	ldr	r1, [pc, #52]	; (8001594 <HAL_GPIO_Init+0x2c0>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	600b      	str	r3, [r1, #0]
 8001564:	e01f      	b.n	80015a6 <HAL_GPIO_Init+0x2d2>
 8001566:	bf00      	nop
 8001568:	10320000 	.word	0x10320000
 800156c:	10310000 	.word	0x10310000
 8001570:	10220000 	.word	0x10220000
 8001574:	10210000 	.word	0x10210000
 8001578:	10120000 	.word	0x10120000
 800157c:	10110000 	.word	0x10110000
 8001580:	40021000 	.word	0x40021000
 8001584:	40010000 	.word	0x40010000
 8001588:	40010800 	.word	0x40010800
 800158c:	40010c00 	.word	0x40010c00
 8001590:	40011000 	.word	0x40011000
 8001594:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_GPIO_Init+0x2f4>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	43db      	mvns	r3, r3
 80015a0:	4909      	ldr	r1, [pc, #36]	; (80015c8 <HAL_GPIO_Init+0x2f4>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	3301      	adds	r3, #1
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	fa22 f303 	lsr.w	r3, r2, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f47f ae96 	bne.w	80012e8 <HAL_GPIO_Init+0x14>
  }
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	372c      	adds	r7, #44	; 0x2c
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	40010400 	.word	0x40010400

080015cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	887b      	ldrh	r3, [r7, #2]
 80015de:	4013      	ands	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015e4:	2301      	movs	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
 80015e8:	e001      	b.n	80015ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	807b      	strh	r3, [r7, #2]
 8001606:	4613      	mov	r3, r2
 8001608:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800160a:	787b      	ldrb	r3, [r7, #1]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001610:	887a      	ldrh	r2, [r7, #2]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001616:	e003      	b.n	8001620 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001618:	887b      	ldrh	r3, [r7, #2]
 800161a:	041a      	lsls	r2, r3, #16
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	611a      	str	r2, [r3, #16]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800162a:	b480      	push	{r7}
 800162c:	b085      	sub	sp, #20
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	460b      	mov	r3, r1
 8001634:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800163c:	887a      	ldrh	r2, [r7, #2]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4013      	ands	r3, r2
 8001642:	041a      	lsls	r2, r3, #16
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	43d9      	mvns	r1, r3
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	400b      	ands	r3, r1
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	611a      	str	r2, [r3, #16]
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e272      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8087 	beq.w	800178a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800167c:	4b92      	ldr	r3, [pc, #584]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 030c 	and.w	r3, r3, #12
 8001684:	2b04      	cmp	r3, #4
 8001686:	d00c      	beq.n	80016a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001688:	4b8f      	ldr	r3, [pc, #572]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b08      	cmp	r3, #8
 8001692:	d112      	bne.n	80016ba <HAL_RCC_OscConfig+0x5e>
 8001694:	4b8c      	ldr	r3, [pc, #560]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a0:	d10b      	bne.n	80016ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a2:	4b89      	ldr	r3, [pc, #548]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d06c      	beq.n	8001788 <HAL_RCC_OscConfig+0x12c>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d168      	bne.n	8001788 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e24c      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x76>
 80016c4:	4b80      	ldr	r3, [pc, #512]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a7f      	ldr	r2, [pc, #508]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	e02e      	b.n	8001730 <HAL_RCC_OscConfig+0xd4>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x98>
 80016da:	4b7b      	ldr	r3, [pc, #492]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a7a      	ldr	r2, [pc, #488]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	4b78      	ldr	r3, [pc, #480]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a77      	ldr	r2, [pc, #476]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e01d      	b.n	8001730 <HAL_RCC_OscConfig+0xd4>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0xbc>
 80016fe:	4b72      	ldr	r3, [pc, #456]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a71      	ldr	r2, [pc, #452]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b6f      	ldr	r3, [pc, #444]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a6e      	ldr	r2, [pc, #440]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0xd4>
 8001718:	4b6b      	ldr	r3, [pc, #428]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a6a      	ldr	r2, [pc, #424]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800171e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a67      	ldr	r2, [pc, #412]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800172a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d013      	beq.n	8001760 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fcb4 	bl	80010a4 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff fcb0 	bl	80010a4 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	; 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e200      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	4b5d      	ldr	r3, [pc, #372]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0xe4>
 800175e:	e014      	b.n	800178a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fca0 	bl	80010a4 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fc9c 	bl	80010a4 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1ec      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x10c>
 8001786:	e000      	b.n	800178a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d063      	beq.n	800185e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001796:	4b4c      	ldr	r3, [pc, #304]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00b      	beq.n	80017ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017a2:	4b49      	ldr	r3, [pc, #292]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d11c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x18c>
 80017ae:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d116      	bne.n	80017e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d005      	beq.n	80017d2 <HAL_RCC_OscConfig+0x176>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d001      	beq.n	80017d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e1c0      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d2:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4939      	ldr	r1, [pc, #228]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e6:	e03a      	b.n	800185e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f0:	4b36      	ldr	r3, [pc, #216]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff fc55 	bl	80010a4 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fe:	f7ff fc51 	bl	80010a4 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e1a1      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001810:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181c:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4927      	ldr	r1, [pc, #156]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
 8001830:	e015      	b.n	800185e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fc34 	bl	80010a4 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001840:	f7ff fc30 	bl	80010a4 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e180      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d03a      	beq.n	80018e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d019      	beq.n	80018a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001878:	f7ff fc14 	bl	80010a4 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001880:	f7ff fc10 	bl	80010a4 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e160      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_RCC_OscConfig+0x26c>)
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800189e:	2001      	movs	r0, #1
 80018a0:	f000 fa9c 	bl	8001ddc <RCC_Delay>
 80018a4:	e01c      	b.n	80018e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ac:	f7ff fbfa 	bl	80010a4 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b2:	e00f      	b.n	80018d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b4:	f7ff fbf6 	bl	80010a4 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d908      	bls.n	80018d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e146      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
 80018cc:	42420000 	.word	0x42420000
 80018d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d4:	4b92      	ldr	r3, [pc, #584]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1e9      	bne.n	80018b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80a6 	beq.w	8001a3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018f2:	4b8b      	ldr	r3, [pc, #556]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10d      	bne.n	800191a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b88      	ldr	r3, [pc, #544]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a87      	ldr	r2, [pc, #540]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	61d3      	str	r3, [r2, #28]
 800190a:	4b85      	ldr	r3, [pc, #532]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001916:	2301      	movs	r3, #1
 8001918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191a:	4b82      	ldr	r3, [pc, #520]	; (8001b24 <HAL_RCC_OscConfig+0x4c8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d118      	bne.n	8001958 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001926:	4b7f      	ldr	r3, [pc, #508]	; (8001b24 <HAL_RCC_OscConfig+0x4c8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a7e      	ldr	r2, [pc, #504]	; (8001b24 <HAL_RCC_OscConfig+0x4c8>)
 800192c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001932:	f7ff fbb7 	bl	80010a4 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193a:	f7ff fbb3 	bl	80010a4 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b64      	cmp	r3, #100	; 0x64
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e103      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	4b75      	ldr	r3, [pc, #468]	; (8001b24 <HAL_RCC_OscConfig+0x4c8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d106      	bne.n	800196e <HAL_RCC_OscConfig+0x312>
 8001960:	4b6f      	ldr	r3, [pc, #444]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4a6e      	ldr	r2, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6213      	str	r3, [r2, #32]
 800196c:	e02d      	b.n	80019ca <HAL_RCC_OscConfig+0x36e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x334>
 8001976:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4a69      	ldr	r2, [pc, #420]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	6213      	str	r3, [r2, #32]
 8001982:	4b67      	ldr	r3, [pc, #412]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	4a66      	ldr	r2, [pc, #408]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	f023 0304 	bic.w	r3, r3, #4
 800198c:	6213      	str	r3, [r2, #32]
 800198e:	e01c      	b.n	80019ca <HAL_RCC_OscConfig+0x36e>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	2b05      	cmp	r3, #5
 8001996:	d10c      	bne.n	80019b2 <HAL_RCC_OscConfig+0x356>
 8001998:	4b61      	ldr	r3, [pc, #388]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4a60      	ldr	r2, [pc, #384]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6213      	str	r3, [r2, #32]
 80019a4:	4b5e      	ldr	r3, [pc, #376]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4a5d      	ldr	r2, [pc, #372]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6213      	str	r3, [r2, #32]
 80019b0:	e00b      	b.n	80019ca <HAL_RCC_OscConfig+0x36e>
 80019b2:	4b5b      	ldr	r3, [pc, #364]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4a5a      	ldr	r2, [pc, #360]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6213      	str	r3, [r2, #32]
 80019be:	4b58      	ldr	r3, [pc, #352]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	4a57      	ldr	r2, [pc, #348]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	f023 0304 	bic.w	r3, r3, #4
 80019c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d015      	beq.n	80019fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d2:	f7ff fb67 	bl	80010a4 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d8:	e00a      	b.n	80019f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019da:	f7ff fb63 	bl	80010a4 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e0b1      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f0:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0ee      	beq.n	80019da <HAL_RCC_OscConfig+0x37e>
 80019fc:	e014      	b.n	8001a28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fe:	f7ff fb51 	bl	80010a4 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7ff fb4d 	bl	80010a4 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e09b      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1c:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1ee      	bne.n	8001a06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d105      	bne.n	8001a3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2e:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4a3b      	ldr	r2, [pc, #236]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8087 	beq.w	8001b52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a44:	4b36      	ldr	r3, [pc, #216]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d061      	beq.n	8001b14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d146      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a58:	4b33      	ldr	r3, [pc, #204]	; (8001b28 <HAL_RCC_OscConfig+0x4cc>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7ff fb21 	bl	80010a4 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a66:	f7ff fb1d 	bl	80010a4 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e06d      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a78:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f0      	bne.n	8001a66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8c:	d108      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	4921      	ldr	r1, [pc, #132]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a19      	ldr	r1, [r3, #32]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	491b      	ldr	r1, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_RCC_OscConfig+0x4cc>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abe:	f7ff faf1 	bl	80010a4 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac6:	f7ff faed 	bl	80010a4 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e03d      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x46a>
 8001ae4:	e035      	b.n	8001b52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_RCC_OscConfig+0x4cc>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff fada 	bl	80010a4 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff fad6 	bl	80010a4 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e026      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x498>
 8001b12:	e01e      	b.n	8001b52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d107      	bne.n	8001b2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e019      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40007000 	.word	0x40007000
 8001b28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCC_OscConfig+0x500>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000

08001b60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0d0      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b74:	4b6a      	ldr	r3, [pc, #424]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d910      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b67      	ldr	r3, [pc, #412]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 0207 	bic.w	r2, r3, #7
 8001b8a:	4965      	ldr	r1, [pc, #404]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b92:	4b63      	ldr	r3, [pc, #396]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0b8      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d020      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bbc:	4b59      	ldr	r3, [pc, #356]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4a58      	ldr	r2, [pc, #352]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd4:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4a52      	ldr	r2, [pc, #328]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be0:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	494d      	ldr	r1, [pc, #308]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d040      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d115      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e07f      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1e:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e073      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e06b      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c3e:	4b39      	ldr	r3, [pc, #228]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f023 0203 	bic.w	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4936      	ldr	r1, [pc, #216]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c50:	f7ff fa28 	bl	80010a4 <HAL_GetTick>
 8001c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c58:	f7ff fa24 	bl	80010a4 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e053      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 020c 	and.w	r2, r3, #12
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d1eb      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c80:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d210      	bcs.n	8001cb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8e:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 0207 	bic.w	r2, r3, #7
 8001c96:	4922      	ldr	r1, [pc, #136]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e032      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4916      	ldr	r1, [pc, #88]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	490e      	ldr	r1, [pc, #56]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cee:	f000 f821 	bl	8001d34 <HAL_RCC_GetSysClockFreq>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	490a      	ldr	r1, [pc, #40]	; (8001d28 <HAL_RCC_ClockConfig+0x1c8>)
 8001d00:	5ccb      	ldrb	r3, [r1, r3]
 8001d02:	fa22 f303 	lsr.w	r3, r2, r3
 8001d06:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x1cc>)
 8001d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_ClockConfig+0x1d0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f986 	bl	8001020 <HAL_InitTick>

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40022000 	.word	0x40022000
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08002658 	.word	0x08002658
 8001d2c:	20000140 	.word	0x20000140
 8001d30:	20000144 	.word	0x20000144

08001d34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	2300      	movs	r3, #0
 8001d48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d002      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x30>
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d003      	beq.n	8001d6a <HAL_RCC_GetSysClockFreq+0x36>
 8001d62:	e027      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001d66:	613b      	str	r3, [r7, #16]
      break;
 8001d68:	e027      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	0c9b      	lsrs	r3, r3, #18
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d74:	5cd3      	ldrb	r3, [r2, r3]
 8001d76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d010      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	0c5b      	lsrs	r3, r3, #17
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	4a11      	ldr	r2, [pc, #68]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a0d      	ldr	r2, [pc, #52]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001d96:	fb03 f202 	mul.w	r2, r3, r2
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	e004      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001da8:	fb02 f303 	mul.w	r3, r2, r3
 8001dac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	613b      	str	r3, [r7, #16]
      break;
 8001db2:	e002      	b.n	8001dba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8001db6:	613b      	str	r3, [r7, #16]
      break;
 8001db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dba:	693b      	ldr	r3, [r7, #16]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	371c      	adds	r7, #28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	007a1200 	.word	0x007a1200
 8001dd0:	08002668 	.word	0x08002668
 8001dd4:	08002678 	.word	0x08002678
 8001dd8:	003d0900 	.word	0x003d0900

08001ddc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <RCC_Delay+0x34>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <RCC_Delay+0x38>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	0a5b      	lsrs	r3, r3, #9
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001df8:	bf00      	nop
  }
  while (Delay --);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1e5a      	subs	r2, r3, #1
 8001dfe:	60fa      	str	r2, [r7, #12]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1f9      	bne.n	8001df8 <RCC_Delay+0x1c>
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	20000140 	.word	0x20000140
 8001e14:	10624dd3 	.word	0x10624dd3

08001e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e041      	b.n	8001eae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7fe ffb0 	bl	8000da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3304      	adds	r3, #4
 8001e54:	4619      	mov	r1, r3
 8001e56:	4610      	mov	r0, r2
 8001e58:	f000 fa6e 	bl	8002338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d001      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e035      	b.n	8001f3c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a16      	ldr	r2, [pc, #88]	; (8001f48 <HAL_TIM_Base_Start_IT+0x90>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d009      	beq.n	8001f06 <HAL_TIM_Base_Start_IT+0x4e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efa:	d004      	beq.n	8001f06 <HAL_TIM_Base_Start_IT+0x4e>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <HAL_TIM_Base_Start_IT+0x94>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d111      	bne.n	8001f2a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b06      	cmp	r3, #6
 8001f16:	d010      	beq.n	8001f3a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f28:	e007      	b.n	8001f3a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0201 	orr.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40012c00 	.word	0x40012c00
 8001f4c:	40000400 	.word	0x40000400

08001f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d122      	bne.n	8001fac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d11b      	bne.n	8001fac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0202 	mvn.w	r2, #2
 8001f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f9b4 	bl	8002300 <HAL_TIM_IC_CaptureCallback>
 8001f98:	e005      	b.n	8001fa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f9a7 	bl	80022ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f9b6 	bl	8002312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d122      	bne.n	8002000 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d11b      	bne.n	8002000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0204 	mvn.w	r2, #4
 8001fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f98a 	bl	8002300 <HAL_TIM_IC_CaptureCallback>
 8001fec:	e005      	b.n	8001ffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f97d 	bl	80022ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f98c 	bl	8002312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b08      	cmp	r3, #8
 800200c:	d122      	bne.n	8002054 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b08      	cmp	r3, #8
 800201a:	d11b      	bne.n	8002054 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0208 	mvn.w	r2, #8
 8002024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2204      	movs	r2, #4
 800202a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f960 	bl	8002300 <HAL_TIM_IC_CaptureCallback>
 8002040:	e005      	b.n	800204e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f953 	bl	80022ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f962 	bl	8002312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	2b10      	cmp	r3, #16
 8002060:	d122      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	2b10      	cmp	r3, #16
 800206e:	d11b      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0210 	mvn.w	r2, #16
 8002078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2208      	movs	r2, #8
 800207e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f936 	bl	8002300 <HAL_TIM_IC_CaptureCallback>
 8002094:	e005      	b.n	80020a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f929 	bl	80022ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f938 	bl	8002312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d10e      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d107      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0201 	mvn.w	r2, #1
 80020cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7fe fe24 	bl	8000d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020de:	2b80      	cmp	r3, #128	; 0x80
 80020e0:	d10e      	bne.n	8002100 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ec:	2b80      	cmp	r3, #128	; 0x80
 80020ee:	d107      	bne.n	8002100 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fa6b 	bl	80025d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210a:	2b40      	cmp	r3, #64	; 0x40
 800210c:	d10e      	bne.n	800212c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002118:	2b40      	cmp	r3, #64	; 0x40
 800211a:	d107      	bne.n	800212c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f8fc 	bl	8002324 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	2b20      	cmp	r3, #32
 8002138:	d10e      	bne.n	8002158 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b20      	cmp	r3, #32
 8002146:	d107      	bne.n	8002158 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0220 	mvn.w	r2, #32
 8002150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fa36 	bl	80025c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_TIM_ConfigClockSource+0x1c>
 8002178:	2302      	movs	r3, #2
 800217a:	e0b4      	b.n	80022e6 <HAL_TIM_ConfigClockSource+0x186>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800219a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b4:	d03e      	beq.n	8002234 <HAL_TIM_ConfigClockSource+0xd4>
 80021b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ba:	f200 8087 	bhi.w	80022cc <HAL_TIM_ConfigClockSource+0x16c>
 80021be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c2:	f000 8086 	beq.w	80022d2 <HAL_TIM_ConfigClockSource+0x172>
 80021c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ca:	d87f      	bhi.n	80022cc <HAL_TIM_ConfigClockSource+0x16c>
 80021cc:	2b70      	cmp	r3, #112	; 0x70
 80021ce:	d01a      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0xa6>
 80021d0:	2b70      	cmp	r3, #112	; 0x70
 80021d2:	d87b      	bhi.n	80022cc <HAL_TIM_ConfigClockSource+0x16c>
 80021d4:	2b60      	cmp	r3, #96	; 0x60
 80021d6:	d050      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x11a>
 80021d8:	2b60      	cmp	r3, #96	; 0x60
 80021da:	d877      	bhi.n	80022cc <HAL_TIM_ConfigClockSource+0x16c>
 80021dc:	2b50      	cmp	r3, #80	; 0x50
 80021de:	d03c      	beq.n	800225a <HAL_TIM_ConfigClockSource+0xfa>
 80021e0:	2b50      	cmp	r3, #80	; 0x50
 80021e2:	d873      	bhi.n	80022cc <HAL_TIM_ConfigClockSource+0x16c>
 80021e4:	2b40      	cmp	r3, #64	; 0x40
 80021e6:	d058      	beq.n	800229a <HAL_TIM_ConfigClockSource+0x13a>
 80021e8:	2b40      	cmp	r3, #64	; 0x40
 80021ea:	d86f      	bhi.n	80022cc <HAL_TIM_ConfigClockSource+0x16c>
 80021ec:	2b30      	cmp	r3, #48	; 0x30
 80021ee:	d064      	beq.n	80022ba <HAL_TIM_ConfigClockSource+0x15a>
 80021f0:	2b30      	cmp	r3, #48	; 0x30
 80021f2:	d86b      	bhi.n	80022cc <HAL_TIM_ConfigClockSource+0x16c>
 80021f4:	2b20      	cmp	r3, #32
 80021f6:	d060      	beq.n	80022ba <HAL_TIM_ConfigClockSource+0x15a>
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	d867      	bhi.n	80022cc <HAL_TIM_ConfigClockSource+0x16c>
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d05c      	beq.n	80022ba <HAL_TIM_ConfigClockSource+0x15a>
 8002200:	2b10      	cmp	r3, #16
 8002202:	d05a      	beq.n	80022ba <HAL_TIM_ConfigClockSource+0x15a>
 8002204:	e062      	b.n	80022cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002216:	f000 f95e 	bl	80024d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002228:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	609a      	str	r2, [r3, #8]
      break;
 8002232:	e04f      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002244:	f000 f947 	bl	80024d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002256:	609a      	str	r2, [r3, #8]
      break;
 8002258:	e03c      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002266:	461a      	mov	r2, r3
 8002268:	f000 f8be 	bl	80023e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2150      	movs	r1, #80	; 0x50
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f915 	bl	80024a2 <TIM_ITRx_SetConfig>
      break;
 8002278:	e02c      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002286:	461a      	mov	r2, r3
 8002288:	f000 f8dc 	bl	8002444 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2160      	movs	r1, #96	; 0x60
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f905 	bl	80024a2 <TIM_ITRx_SetConfig>
      break;
 8002298:	e01c      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022a6:	461a      	mov	r2, r3
 80022a8:	f000 f89e 	bl	80023e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2140      	movs	r1, #64	; 0x40
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f8f5 	bl	80024a2 <TIM_ITRx_SetConfig>
      break;
 80022b8:	e00c      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4619      	mov	r1, r3
 80022c4:	4610      	mov	r0, r2
 80022c6:	f000 f8ec 	bl	80024a2 <TIM_ITRx_SetConfig>
      break;
 80022ca:	e003      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
      break;
 80022d0:	e000      	b.n	80022d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
	...

08002338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a25      	ldr	r2, [pc, #148]	; (80023e0 <TIM_Base_SetConfig+0xa8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d007      	beq.n	8002360 <TIM_Base_SetConfig+0x28>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002356:	d003      	beq.n	8002360 <TIM_Base_SetConfig+0x28>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a22      	ldr	r2, [pc, #136]	; (80023e4 <TIM_Base_SetConfig+0xac>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d108      	bne.n	8002372 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a1a      	ldr	r2, [pc, #104]	; (80023e0 <TIM_Base_SetConfig+0xa8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d007      	beq.n	800238a <TIM_Base_SetConfig+0x52>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002380:	d003      	beq.n	800238a <TIM_Base_SetConfig+0x52>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a17      	ldr	r2, [pc, #92]	; (80023e4 <TIM_Base_SetConfig+0xac>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d108      	bne.n	800239c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <TIM_Base_SetConfig+0xa8>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d103      	bne.n	80023d0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	615a      	str	r2, [r3, #20]
}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	40012c00 	.word	0x40012c00
 80023e4:	40000400 	.word	0x40000400

080023e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	f023 0201 	bic.w	r2, r3, #1
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f023 030a 	bic.w	r3, r3, #10
 8002424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4313      	orrs	r3, r2
 800242c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	621a      	str	r2, [r3, #32]
}
 800243a:	bf00      	nop
 800243c:	371c      	adds	r7, #28
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	f023 0210 	bic.w	r2, r3, #16
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800246e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	031b      	lsls	r3, r3, #12
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002480:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	621a      	str	r2, [r3, #32]
}
 8002498:	bf00      	nop
 800249a:	371c      	adds	r7, #28
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b085      	sub	sp, #20
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	f043 0307 	orr.w	r3, r3, #7
 80024c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	609a      	str	r2, [r3, #8]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b087      	sub	sp, #28
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
 80024e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	021a      	lsls	r2, r3, #8
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	609a      	str	r2, [r3, #8]
}
 800250a:	bf00      	nop
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002528:	2302      	movs	r3, #2
 800252a:	e041      	b.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a14      	ldr	r2, [pc, #80]	; (80025bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d009      	beq.n	8002584 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002578:	d004      	beq.n	8002584 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a10      	ldr	r2, [pc, #64]	; (80025c0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d10c      	bne.n	800259e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800258a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	4313      	orrs	r3, r2
 8002594:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40012c00 	.word	0x40012c00
 80025c0:	40000400 	.word	0x40000400

080025c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr

080025d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <memset>:
 80025e8:	4603      	mov	r3, r0
 80025ea:	4402      	add	r2, r0
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d100      	bne.n	80025f2 <memset+0xa>
 80025f0:	4770      	bx	lr
 80025f2:	f803 1b01 	strb.w	r1, [r3], #1
 80025f6:	e7f9      	b.n	80025ec <memset+0x4>

080025f8 <__libc_init_array>:
 80025f8:	b570      	push	{r4, r5, r6, lr}
 80025fa:	2600      	movs	r6, #0
 80025fc:	4d0c      	ldr	r5, [pc, #48]	; (8002630 <__libc_init_array+0x38>)
 80025fe:	4c0d      	ldr	r4, [pc, #52]	; (8002634 <__libc_init_array+0x3c>)
 8002600:	1b64      	subs	r4, r4, r5
 8002602:	10a4      	asrs	r4, r4, #2
 8002604:	42a6      	cmp	r6, r4
 8002606:	d109      	bne.n	800261c <__libc_init_array+0x24>
 8002608:	f000 f81a 	bl	8002640 <_init>
 800260c:	2600      	movs	r6, #0
 800260e:	4d0a      	ldr	r5, [pc, #40]	; (8002638 <__libc_init_array+0x40>)
 8002610:	4c0a      	ldr	r4, [pc, #40]	; (800263c <__libc_init_array+0x44>)
 8002612:	1b64      	subs	r4, r4, r5
 8002614:	10a4      	asrs	r4, r4, #2
 8002616:	42a6      	cmp	r6, r4
 8002618:	d105      	bne.n	8002626 <__libc_init_array+0x2e>
 800261a:	bd70      	pop	{r4, r5, r6, pc}
 800261c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002620:	4798      	blx	r3
 8002622:	3601      	adds	r6, #1
 8002624:	e7ee      	b.n	8002604 <__libc_init_array+0xc>
 8002626:	f855 3b04 	ldr.w	r3, [r5], #4
 800262a:	4798      	blx	r3
 800262c:	3601      	adds	r6, #1
 800262e:	e7f2      	b.n	8002616 <__libc_init_array+0x1e>
 8002630:	0800267c 	.word	0x0800267c
 8002634:	0800267c 	.word	0x0800267c
 8002638:	0800267c 	.word	0x0800267c
 800263c:	08002680 	.word	0x08002680

08002640 <_init>:
 8002640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002642:	bf00      	nop
 8002644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002646:	bc08      	pop	{r3}
 8002648:	469e      	mov	lr, r3
 800264a:	4770      	bx	lr

0800264c <_fini>:
 800264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264e:	bf00      	nop
 8002650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002652:	bc08      	pop	{r3}
 8002654:	469e      	mov	lr, r3
 8002656:	4770      	bx	lr
